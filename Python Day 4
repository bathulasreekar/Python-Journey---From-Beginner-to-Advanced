{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7GPitlr8LAtm"
   },
   "source": [
    "<table align=\"left\" width=100%>\n",
    "            <div align=\"center\">\n",
    "                <font color=\"#21618C\" size=8px>\n",
    "                  <b> Python - Day 4 <br>  </b>\n",
    "                </font>\n",
    "            </div>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gdZ0WwlnLAtp"
   },
   "source": [
    "## Table of Content\n",
    "\n",
    "1. **[Built-in Functions](#builtin)**\n",
    "\n",
    "2. **[User Defined Functions](#user)**\n",
    "    - 2.1 - **[User defined functions without arguments](#without_arg)**\n",
    "    - 2.2 - **[User defined functions with arguments](#with_arg)**\n",
    "    - 2.3 - **[Recursive Functions](#Recursive_Functions)**\n",
    "\n",
    "3. **[Scope of  Variables](#scope)**\n",
    "\n",
    "4. **[Lambda Functions](#lambda)**\n",
    "\n",
    "5. **[Overview of map, reduce and filter functions](#overview)**\n",
    "    - 5.1 - [Function map()](#map)\n",
    "    - 5.2 - [Function filter()](#filter)\n",
    "    - 5.3 - [Function reduce()](#reduce)\n",
    "    - 5.4 - [Function accumulate() ](#accumulate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QgVXl0DzLAtq"
   },
   "source": [
    "<a id=\"builtin\"> </a>\n",
    "## 1. Built-in Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SnMO6cz_LAtq"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"15%\">\n",
    "            <img src=\"note.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b>The Python interpreter has functions instantly available for use, called <i>built-in functions</i>. For example, the print() function prints the given object. <br><br> In Python 3.6 there are 69 built-in functions.<br>\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZVEjtC7ZLAtq"
   },
   "source": [
    "Some examples are: \n",
    "\n",
    "<table border=\"2\">\n",
    "<tr>\n",
    "<th> Function </th>\n",
    "<th> Description </th>\n",
    "</tr>\n",
    "<tr>\n",
    "<th> abs()</th>\n",
    "<th> It gives the absolute of a numeric value </th>\n",
    "<tr>\n",
    "<tr>\n",
    "<th> sum()</th>\n",
    "<th> It gives the sum of a numeric values values </th>\n",
    "<tr>\n",
    "<tr>\n",
    "<th> len()</th>\n",
    "<th> It gives the sum of a numeric values values </th>\n",
    "<tr>   \n",
    "<tr>\n",
    "<th> apply()</th>\n",
    "<th> applied both to series and dataframes where function can be applied both series and individual elements based on the type of function provide </th>\n",
    "<tr> \n",
    "<tr>\n",
    "<th> map()</th>\n",
    "<th> only works on a pandas series where type of operation to be applied depends on argument passed as a function, dictionary or a list </th>\n",
    "<tr>         \n",
    "</table>    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7v8EeET5LAtr"
   },
   "source": [
    "As we progress with the course, we shall come across a few more built-in functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xp_mNkD2LAtr"
   },
   "source": [
    "Get the absolute value of a number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "q0mJ8-y4LAtr"
   },
   "outputs": [],
   "source": [
    "# get the absolute value of -99.34\n",
    "abs(-99.34)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PPNyocElLAts"
   },
   "source": [
    "A list consists of elements 44, 45, -56, 44, 32,-54, 44, 56, 44, 87, 44, 56. <br>\n",
    "We can obtain the number of elements in the Flist and sum of all these elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8RM8buMELAts"
   },
   "outputs": [],
   "source": [
    "x = [44, 45, -56, 44, 32,-54, 44, 56, 44, 87, 44, 56]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "j1cAXatlLAts"
   },
   "outputs": [],
   "source": [
    "# len() is used to check length\n",
    "len(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rYzjCFkbLAtt"
   },
   "outputs": [],
   "source": [
    "# sum() is used to obtain sum of all the elements in list\n",
    "sum(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ImRmSAXlLAtt"
   },
   "outputs": [],
   "source": [
    "# create a string\n",
    "string = \"Data Science\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GU29XIfiLAtt"
   },
   "source": [
    "Get the length of the string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CAYX_Og4LAtt"
   },
   "outputs": [],
   "source": [
    "# use len() to obtain the length of the string\n",
    "len(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OHa1zygILAtt"
   },
   "source": [
    "The output is the number of characters in the string including the blank space."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BT_6uTB4LAtu"
   },
   "source": [
    "Now let us find the number of words in the string.\n",
    "\n",
    "To do so, we will first break the string at the blank space using the function split() and then with the help of the function len() we obtain the number of words in the string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PyRLwtSaLAtu",
    "outputId": "bc7a140a-7071-4327-a8f1-f3c9978e35b7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(string.split())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VCOCvbRSLAtv"
   },
   "source": [
    "Now we create a string 'apple, kiwi, pineapple,mango,grapes, banana'. Is it possible to find the number of fruits in the string?si\n",
    "\n",
    "Yes, it is. We shall use the split function again and then function 'len'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-DBaEoZcLAtv",
    "outputId": "2492f15e-b57d-45dc-af52-7ea26a713285"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple,', 'kiwi,', 'pineapple,mango,grapes,', 'banana']\n",
      "The number of fruits in the list are:  4\n"
     ]
    }
   ],
   "source": [
    "# create a string\n",
    "fruits = 'apple, kiwi, pineapple,mango,grapes, banana'\n",
    "\n",
    "print(fruits.split())\n",
    "print(\"The number of fruits in the list are: \" , len(fruits.split()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1a26xv2ELAtv"
   },
   "source": [
    "It is however evident that there are more than 4 fruits in the list\n",
    "\n",
    "**Note:** The function split(), breaks the string at a blank space (white space) if no argument is passed. So now we shall specify for it to break at a \",\" since the string is not spaced properly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "44Lj4C55LAtv",
    "outputId": "ed65fee2-6e19-4bb1-f34a-d7320c19eed0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', ' kiwi', ' pineapple', 'mango', 'grapes', ' banana']\n",
      "The number of fruits in the list are:  6\n"
     ]
    }
   ],
   "source": [
    "print(fruits.split(\",\"))\n",
    "print(\"The number of fruits in the list are: \" , len(fruits.split(\",\")))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "H-2qivz8LAtw"
   },
   "source": [
    "This gives the correct output."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6ul_iM9mLAtw"
   },
   "source": [
    "**Note:** We can specify any character we wish to split at. For instance, a letter, a number, \",\" , \"'\" , \".\" and so on. If nothing is specified, the function will split at a white space by default."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ap0gkQ5eLAtw"
   },
   "source": [
    "<a id=\"user\"> </a>\n",
    "## 2. User Defined Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lnZH-plZLAtw"
   },
   "source": [
    "There are situations where built-in functions are not available in a library. In such cases, we do the computations by using formulas/concepts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VwcK7qfmLAtw"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"15%\">\n",
    "            <img src=\"note.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> At times there are no built-in functions available, thus there arises a need for the user to define a function as desired. The user-defined functions are named blocks of code that are designed to do a specific job(s). When you want to perform a particular task that you’ve defined in a function, you call the name of the function responsible for it. This aids the scenarios where a chunk of code is required repeatedly; just call the function dedicated to handling that task, and the call tells Python to run the code inside the function. You’ll find that using functions makes your programs easier to write, read, test, and fix.\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1gX7eWuVLAtx"
   },
   "source": [
    "### Argument and Parameter\n",
    "\n",
    "\n",
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"8%\">\n",
    "            <img src=\"caution.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> Parameters and arguments are subtly different. Let us first define them.<br><br>\n",
    "                         1. Parameter: A value which is passed when defining a function\n",
    "                        <br><br>\n",
    "                         2. Argument: A value that is passed when invoking a function\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tbCoSAspLAtx"
   },
   "source": [
    "Consider the following user defined function:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "id": "I4vV6tuuLAtx"
   },
   "source": [
    "def fun(params):\n",
    "    statement 1\n",
    "    statement 2\n",
    "        .\n",
    "        .\n",
    "        .\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qwtmdGJOLAty"
   },
   "source": [
    "Now, if we invoke this function:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "id": "HmIdIxvqLAty"
   },
   "source": [
    "fun(sample_parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fx49VB4SLAty"
   },
   "source": [
    "Here the 'sample_parameters' is called an argument."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Wo7HJfc6LAty"
   },
   "source": [
    "<a id=\"without_arg\"> </a>\n",
    "## 2.1 User defined functions without arguments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m5MTdvvRLAty"
   },
   "source": [
    "Once a function is defined, it can be called anytime, without running the function again. Generally, a function returns a value or prints a value.  \n",
    "\n",
    "Let us see a few examples of user defined functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "94AsjJrSLAtz"
   },
   "source": [
    "**1. We shall write a user defined function without argument to find the twice of a number.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SmQAuLtmLAtz"
   },
   "outputs": [],
   "source": [
    "def twice():\n",
    "    a = int(input('enter a number: '))\n",
    "    print(a*2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HUwYAq0LLAt1",
    "outputId": "fde577cd-c297-4263-c90b-761aab45a7ad"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number: 10\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "# In this function, no argument is passed\n",
    "# call the function\n",
    "twice()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uSocn9OVLAt2"
   },
   "source": [
    "**2. We shall write a user defined function hi() which takes a string input. The output will greet the user displaying his/her name on the screen.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MUApQUWoLAt2"
   },
   "outputs": [],
   "source": [
    "def hi():\n",
    "    name = str(input('Enter your name: '))\n",
    "    print(\"Hey \" + name +\", how are you?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9eEY-F1tLAt2",
    "outputId": "150d8976-eec5-44b0-d8f8-c3e01760dfbe"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your name: Steve\n",
      "Hey Steve, how are you?\n"
     ]
    }
   ],
   "source": [
    "# In this function, no argument is passed\n",
    "# call the function\n",
    "hi()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1yZ126KeLAt2"
   },
   "outputs": [],
   "source": [
    "#create a function\n",
    "def greetings():\n",
    "    print(\"hello\")\n",
    "    print(\"How are you ?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Wa1I2imFLAt2",
    "outputId": "c1040ae5-d5da-4e13-fde1-48b791f3c794"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n",
      "How are you ?\n"
     ]
    }
   ],
   "source": [
    "# In this function, no argument is passed\n",
    "# call the function\n",
    "greetings()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XLfJaZnALAt3"
   },
   "source": [
    "**3. To find area of a circle**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9wD5YLihLAt3"
   },
   "outputs": [],
   "source": [
    "def area_circle():\n",
    "    r = int(input('Enter the radius of circle: '))\n",
    "    area = 3.14 * r**2 \n",
    "    print(\"The area of circle with radius \" + str(r)  +\" is \" + str(area) + \" sq. units\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uC0HJiRJLAt3",
    "outputId": "d9e5b19a-97f8-4609-b284-c0b602a9e6a3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the radius of circle: 5\n",
      "The area of circle with radius 5 is 78.5 sq. units\n"
     ]
    }
   ],
   "source": [
    "# call the function   \n",
    "area_circle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UlRgCl18LAt3"
   },
   "source": [
    "<a id=\"with_arg\"> </a>\n",
    "## 2.2 User defined functions with arguments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6rip7Y-JLAt3"
   },
   "source": [
    "Most of the functions will either `return` a value or `print` an output. Take a note of this in the examples considered below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pqljdlFlLAt3"
   },
   "source": [
    "**1. A user defined function to get the average of all numbers in a sequence.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ICXOboWqLAt4"
   },
   "outputs": [],
   "source": [
    "def average(x):\n",
    "    count = 0\n",
    "    total = 0\n",
    "    for i in x:\n",
    "        count += 1\n",
    "        total += i\n",
    "    avg = total/count\n",
    "    return avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YAfw-_UCLAt4"
   },
   "outputs": [],
   "source": [
    "x = (44, 45, -56, 44, 32,-54, 44, 56, 44, 87, 44, 56)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "kns5SK3aLAt4",
    "outputId": "c61c9a20-b1e5-43d8-9219-468432541546"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.166666666666664"
      ]
     },
     "execution_count": 20,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# call the function   \n",
    "average(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PclLOYUlLAt4"
   },
   "source": [
    "The average of the number is 32.1667"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TQq7VBRmLAt4"
   },
   "source": [
    "If the function requires an argument to be passed and we do not provide it, then an error will be shown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "kLDMlVf5LAt5",
    "outputId": "73f3c12b-e1ff-4f18-9a9c-284368c38230"
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "average() missing 1 required positional argument: 'x'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-5de4ee5b559d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# call the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maverage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: average() missing 1 required positional argument: 'x'"
     ]
    }
   ],
   "source": [
    "# call the function   \n",
    "average()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6bDzpsrdLAt5"
   },
   "source": [
    "**2. A user defined function with argument to greet a person by name.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "f_ULpAJNLAt5"
   },
   "outputs": [],
   "source": [
    "def greet(name):\n",
    "    name = str(name)\n",
    "    print(\"Hello, \" + name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tRMi025OLAt5",
    "outputId": "a8fd86ff-4b50-4679-ddad-230c7c8c1650"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Dave\n"
     ]
    }
   ],
   "source": [
    "# call the function        \n",
    "greet('Dave')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zdML3-KRLAt5"
   },
   "source": [
    "Enter your name in the parenthese, and your notebook will greet you!.\n",
    "\n",
    "**Also note that this function prints an output.** "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jR6x5EWLLAt5"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"8%\">\n",
    "            <img src=\"todo.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> TRY IT YOURSELF: <br> Assign a print() function to a variable. Is it possible?\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LQgkZEPcLAt6"
   },
   "source": [
    "**Answer:** The 'print' output can not be stored in a variable. Moreover, any function which returns a value can be stored in a variable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZTZ0usKQLAt6"
   },
   "source": [
    "**4. Consider the list given below and write a function to find the unique values of the list**\n",
    "\n",
    "                [44,45,56,44,32,54,44,56,44,87,44,56]\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5a2LfG5ALAt6"
   },
   "outputs": [],
   "source": [
    "def unique(list1): \n",
    "    unique_list = [] \n",
    "    for x in list1: \n",
    "            if x not in unique_list: \n",
    "                 unique_list.append(x)  \n",
    "    return unique_list    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "n-FQeO3BLAt6",
    "outputId": "9ad5bddb-1c8c-4d10-80ae-89fd8032bffa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[44, 45, 56, 32, 54, 87]"
      ]
     },
     "execution_count": 25,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = [44,45,56,44,32,54,44,56,44,87,44,56]\n",
    "\n",
    "# call the function  \n",
    "# store the output in a variable\n",
    "unique_values = unique(x)\n",
    "\n",
    "# print the variable name\n",
    "unique_values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lqqdTuBuLAt7"
   },
   "source": [
    "These are the unique values in the list.\n",
    "\n",
    "**Also note that this function returns the output to the calling program.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JLhUVadDLAt7"
   },
   "source": [
    "**5. A function to reverse a string**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NW8YiB8ALAt7"
   },
   "outputs": [],
   "source": [
    "def reverse(string):\n",
    "    # set the empty string\n",
    "    rev=''\n",
    "    for i in string:\n",
    "        rev = i+rev\n",
    "    print(rev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8hKU3yk7LAt7",
    "outputId": "87171a76-6c6d-4dba-a319-6ff0f379e670"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter string:Data Science\n",
      "ecneicS ataD\n"
     ]
    }
   ],
   "source": [
    "# call the function\n",
    "string = str(input('Enter string:'))\n",
    "reverse(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "niQBb8yaLAt7"
   },
   "source": [
    "**6. A function to display multiplication table of an integer**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "7eQQl4PdLAt8"
   },
   "outputs": [],
   "source": [
    "def table(n):\n",
    "    multi = 1\n",
    "    for i in range(1,11):\n",
    "        multi = n*i\n",
    "        print(str(i) + \" times \" + str(n) + \" is \" + str(multi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "G8gCFvg3LAt8",
    "outputId": "bd36a6e9-1bf3-4c31-ac0c-c7c4e0f1964a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number:6\n",
      "1 times 6 is 6\n",
      "2 times 6 is 12\n",
      "3 times 6 is 18\n",
      "4 times 6 is 24\n",
      "5 times 6 is 30\n",
      "6 times 6 is 36\n",
      "7 times 6 is 42\n",
      "8 times 6 is 48\n",
      "9 times 6 is 54\n",
      "10 times 6 is 60\n"
     ]
    }
   ],
   "source": [
    "# call the function        \n",
    "n=int(input('Enter number:'))\n",
    "table(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5q8D5CA5LAt8"
   },
   "source": [
    "**7. To find the product of numbers in a list.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4CBwzKXlLAt8"
   },
   "outputs": [],
   "source": [
    "def product(x):\n",
    "    prod = 1\n",
    "    for i in x:\n",
    "        prod *= i\n",
    "    return prod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "h6S0jyJfLAt8",
    "outputId": "dba00e7b-6507-45d2-b70b-78416ea2d1e7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 31,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#call the function\n",
    "product([1,2,3,4,5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fiy4I5U5LAt8"
   },
   "source": [
    "**8. A function which takes the order of a matrix and multiplies it with a scalar. The function takes two parameters- first the order of identity matrix and second the scalar to be multiplied.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MTtz4ojqLAt9"
   },
   "outputs": [],
   "source": [
    "def scalar_multiplication(n,m):\n",
    "    for i in range(0,n):\n",
    "        for j in range(0,n):\n",
    "            if(i==j):\n",
    "                print(m,sep=\" \",end=\" \")\n",
    "            else:\n",
    "                print(\"0\",sep=\" \",end=\" \")\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uFOqTF-3LAt9",
    "outputId": "70b3f992-12b6-47b9-bc62-1dbb2c10bf2a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 0 0 0 \n",
      "0 5 0 0 \n",
      "0 0 5 0 \n",
      "0 0 0 5 \n"
     ]
    }
   ],
   "source": [
    "#call the function\n",
    "scalar_multiplication(4,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wnsK8NXOLAt9"
   },
   "source": [
    "**9. Usage of `*args`.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CjROb3DGLAt9"
   },
   "source": [
    "Usage : multiple arguments can be added without specifying the number of parameters defined in a function.  It is used to pass a non-keyworded, variable-length argument list.\n",
    "\n",
    " `*args` in function definitions in python is used to pass a variable number of arguments to a function. It reads the value one by one and performs the required task. <br>\n",
    " The symbol `*` is used to take in a variable number of arguments; by convention, it is often used with the word 'args', however we may use another word. \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IGYvSsICLAt9"
   },
   "outputs": [],
   "source": [
    "# * indicates that number of arguments can be taken\n",
    "def Multiple(*args):  \n",
    "    for parameter in args:  \n",
    "        print (parameter) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "P8cuGqSHLAt9",
    "outputId": "a40ffc49-1f1a-416d-c4c2-5f61f339fbf8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lets\n",
      "learn\n",
      "Python\n",
      "for\n",
      "Data\n",
      "Science\n"
     ]
    }
   ],
   "source": [
    "#call the function\n",
    "Multiple(\"Lets\",\"learn\",\"Python\",\"for\",\"Data\",\"Science\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UXsI0ryNLAt-"
   },
   "source": [
    "**10. Another example on `*args`.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "89r0cj_6LAt-"
   },
   "outputs": [],
   "source": [
    "def to_print( argument1, *argument):\n",
    "   print(argument1)\n",
    "   for var in argument:\n",
    "        print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "39EMSqO_LAt-",
    "outputId": "4432098e-053d-4863-b879-edb75f7b112c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "20\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "#call the function        \n",
    "to_print( 10,20,30 )   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IdBGiNu8LAt-"
   },
   "source": [
    "**11. Usage of  ` **kwargs`.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0lz63OF7LAt-"
   },
   "source": [
    "Usage: `**kwargs` is used to pass a keyworded, variable-length argument list to the function. The name 'kwargs' is used with the double star because it allows us to pass through keyword arguments (and any number of them)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mTAp1MyBLAt_"
   },
   "outputs": [],
   "source": [
    "def function(**kwargs):\n",
    "    for a,b in kwargs.items():\n",
    "        print(a,\"==\",b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "XujY68fgLAt_",
    "outputId": "92d9e843-d03c-4c22-c948-c48ce22efb07"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A == First letter\n",
      "B == Second letter\n",
      "C == Third letter\n"
     ]
    }
   ],
   "source": [
    "# call the function\n",
    "a=function(A = \"First letter\", B = \"Second letter\", C = \"Third letter\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "E6LjuRBDLAt_"
   },
   "source": [
    "**12. Another example of ` **kwargs `.**\n",
    "\n",
    "`**kwargs` is a dict of the keyword or arguments passed to the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "xAXK3bUOLAt_"
   },
   "outputs": [],
   "source": [
    "def print_keyword_args(**kwargs):\n",
    "      for key, value in kwargs.items():\n",
    "            print( \"%s = %s\" % (key, value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "B5MBzyh-LAt_",
    "outputId": "fa04c3ed-e6a1-4c35-c7fe-2c7601599e58"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first_name = John\n",
      "last_name = Doe\n"
     ]
    }
   ],
   "source": [
    "# call the function\n",
    "print_keyword_args(first_name=\"John\", last_name=\"Doe\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rBn4owO_LAuA"
   },
   "source": [
    "<a id=\"Recursive_Functions\"> </a>\n",
    "## 2.3 Recursive Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e6_giNAkLAuA"
   },
   "source": [
    "A function that calls itself is a recursive function. Recursive function is used when a certain problem is defined in terms of itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2Fjp3hAiLAuA",
    "outputId": "b9653f68-a17a-4a0d-ba9b-59e6b1afebc4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 42,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the sum of all numbers present in the list\n",
    "def sum_list(nums):\n",
    "    if len(nums) == 0:\n",
    "        return 0\n",
    "\n",
    "    last_num = nums.pop()\n",
    "    return last_num + sum_list(nums)\n",
    "\n",
    "num = [1,2,3,4]\n",
    "sum_list(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jf4Wj4P8LAuA",
    "outputId": "4c4978f0-a052-42d1-dfe5-35cfae278a25"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 "
     ]
    }
   ],
   "source": [
    "# implementation of the fibonacci series using recursion\n",
    "def fib(n):\n",
    "    if n == 0:\n",
    "        return 0\n",
    "    elif n == 1:\n",
    "        return 1\n",
    "    else:\n",
    "        return fib(n - 1) + fib(n - 2)\n",
    " \n",
    " \n",
    "for i in range(15):\n",
    "    print(fib(i), end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nu3Rm0cWLAuA"
   },
   "source": [
    "<a id = 'scope'></a>\n",
    "## 3. Scope of Variables:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rUPn-YJxLAuA"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"15%\">\n",
    "            <img src=\"note.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> The scope of variables is broadly classified as: <br><br>\n",
    "                        1. Global Variable: Global variables are the variables declared outside of the function or in global scope. This means, the global variable can be accessed inside or outside of the function.\n",
    "                        <br> <br> <br>\n",
    "                        2. Local Variable : Local variables are the variables declared inside the function's body or in the local scope\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RuPH0YUqLAuB"
   },
   "source": [
    "**Following are examples of Global variables:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EYmGM9XELAuB"
   },
   "source": [
    "The variable 'string' is a global variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iLdx9BAfLAuB",
    "outputId": "10d6ceed-d9ec-456b-ffa3-eb5dbb827622"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python for Data Science\n"
     ]
    }
   ],
   "source": [
    "string = \"Python for Data Science\"\n",
    "\n",
    "# This function uses global variable 'string'\n",
    "def function():  \n",
    "    print (string)  \n",
    "\n",
    "function()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dTaf3k-dLAuB"
   },
   "source": [
    "Here the variable 'string' is declared outside the definition. The value of that string is considered in the user defined function to print the output."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v4MsI_b3LAuB"
   },
   "source": [
    "Another example where x is a global variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gVjX28U9LAuB"
   },
   "outputs": [],
   "source": [
    "# we first define the global variable\n",
    "x = 8\n",
    "\n",
    "# define a function\n",
    "def f():\n",
    "    x = 4\n",
    "    y = x\n",
    "    print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "dt1c_wPVLAuC",
    "outputId": "dd3523f9-4b63-4b42-962f-eddf3dc97133"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# let us call the function\n",
    "f()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LFflzkjLLAuC",
    "outputId": "7160fad4-58a3-4a06-b5bd-9925a116a04b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 47,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# call the variable x\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NN3sB95BLAuC"
   },
   "source": [
    "It is clear that variable x which takes the value 8 is a global variable and variable x which takes value 4 is the local variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ih1HM-rHLAuC"
   },
   "source": [
    "Consider another scenario where x is declared in the function after y is declared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jMmjL6aNLAuC"
   },
   "outputs": [],
   "source": [
    "def f():\n",
    "    y = x\n",
    "    print(y)\n",
    "    x = 22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tw1ZkdiXLAuC",
    "outputId": "85b8ae6d-0707-48e4-d577-ff5b072289b9",
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "UnboundLocalError",
     "evalue": "local variable 'x' referenced before assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-49-c43e34e6d405>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-48-3df47531e355>\u001b[0m in \u001b[0;36mf\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m22\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'x' referenced before assignment"
     ]
    }
   ],
   "source": [
    "f()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OKOpICzqLAuD"
   },
   "source": [
    "The output will be an error since x is declared after y and y is x."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Wjtv2xrxLAuD"
   },
   "source": [
    "Example of local variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zpFK9C6ZLAuD",
    "outputId": "6a2f77b0-971d-4d2b-80c5-5a619a82fb24"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "def sum(x,y):\n",
    "    sum = x + y\n",
    "    return sum\n",
    "\n",
    "print(sum(4,7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ngSu79Z-LAuD"
   },
   "source": [
    "Here, x and y are local variables. Their value is not callable outside the definition."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jvp9zM19LAuE"
   },
   "source": [
    "Let us print x and check its value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Pu5YzF-0LAuE",
    "outputId": "5beeb9d8-2863-4613-f53f-e29687e30729"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 51,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "l0Q-Pz64LAuE"
   },
   "source": [
    "**Here x takes its global value and not the one defined in the function.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WvHY6dkhLAuE"
   },
   "source": [
    "Another example of local variable:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EDwUjWbvLAuE",
    "outputId": "3b6caddc-49ea-41d2-c86d-5223fe5fcf6a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a Local variable\n"
     ]
    }
   ],
   "source": [
    "# set a local variable\n",
    "def local():\n",
    "    y = \"This is a Local variable\"\n",
    "    print(y)\n",
    "\n",
    "local()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XaO5oFuMLAuF"
   },
   "source": [
    "Now if we print just y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OBNLXqkULAuF",
    "outputId": "a118925b-9cb5-440f-eaaf-3571589710da",
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-53-4f4f6d0c9b01>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# local variable y cannot be accessed outside the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'y' is not defined"
     ]
    }
   ],
   "source": [
    "# local variable y cannot be accessed outside the function\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EpthH5xOLAuF"
   },
   "source": [
    "We are bound to get an error since it. The variable 'y' is a local variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jdWxibdYLAuF"
   },
   "source": [
    "Let us consider another example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iR-uku-sLAuG"
   },
   "source": [
    "<a id = 'lambda' > </a>\n",
    "## 4. Lambda Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HDwlDttsLAuG"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"15%\">\n",
    "            <img src=\"note.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> A lambda operator or lambda function is used for creating small, one-time, anonymous function objects in Python.<br><br>The general expression for a lambda function is <br>\n",
    "                                      lambda argument(s): expression <br><br>\n",
    "                        A lambda function can take any number of arguments, but they contain only a single expression. An expression is a piece of code executed by the lambda function, which may or may not return any value. <br><br>\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kHCNDQ7MLAuG"
   },
   "source": [
    "Let us look at some examples using lambda functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5Kcx_08FLAuG"
   },
   "source": [
    "**1. Obtain the minimum among two numbers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "WSdFtuBbLAuG",
    "outputId": "4e05e6e0-21f7-46ee-a287-a9cf6aba7871"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 54,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_value = (lambda x, y: x if x < y else y)\n",
    "min_value(34, 78)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-CDJlU60LAuG"
   },
   "source": [
    "**2.  Check whether two strings are equal**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "i7QDIOwPLAuH",
    "outputId": "43781f89-95d9-4ea0-c7c4-9d406ebc8d52"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'False'"
      ]
     },
     "execution_count": 55,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = (lambda x, y: 'True' if x == y else 'False')\n",
    "result(\"Data\", \"DaTa\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "k7uQ2pBELAuH"
   },
   "source": [
    "**3. Demonstrating wrong usage of variable name**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EIEcf8v7LAuH",
    "outputId": "ca031176-6881-47a0-8d53-55aa2053d707"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'b' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-bd761ffa67f4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# multiplication - wrong usage of variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-56-bd761ffa67f4>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(a, c)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# multiplication - wrong usage of variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'b' is not defined"
     ]
    }
   ],
   "source": [
    "# multiplication - wrong usage of variable\n",
    "x = lambda a, c : a + b\n",
    "print(x(5, 6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2vUAW7kCLAuH"
   },
   "source": [
    "**If variable a and c are used, then the operations should be on a and c.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1rlc4I7YLAuH"
   },
   "source": [
    "<a id='overview'> </a>\n",
    "## 5. Overview of map, reduce and filter functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "J0xRW_PeLAuH"
   },
   "source": [
    "<table align=\"left\">\n",
    "    <tr>\n",
    "        <td width=\"15%\">\n",
    "            <img src=\"note.png\">\n",
    "        </td>\n",
    "        <td>\n",
    "            <div align=\"left\", style=\"font-size:120%\">\n",
    "                <font color=\"#21618C\">\n",
    "                    <b> The function map(f,l) applies a function 'f' to each element of list 'l' <br> \n",
    "                        The output of map is not a list, to convert it to a list use list(map(f,l)) <br><br>\n",
    "                        <br>\n",
    "                      The function filter(p,l) where property p is checked for every element in list l. The output of filter(p, l) is a sublist of list 'l' that satisfies the property 'p'. <br><br><br>\n",
    "                        The reduce(fun,seq) function is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along and returns only one value.This function is defined in the “functools” module. <br><br><br>\n",
    "                        The  accumulate() in the “itertools” module. The syntax is accumulate(l,f). It works similar to the reduce(), however there is a little difference in the output.\n",
    "                    </b>\n",
    "                </font>\n",
    "            </div>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TKW0agUcLAuI"
   },
   "source": [
    "<a id='map'></a>\n",
    "### 5.1 Function map()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qiW2mLyKLAuI"
   },
   "source": [
    "**1. A test was conducted in a class, the list of all the scores is given. Tha scores are out of 45. Obtain the percentage of each score using lambda function.**\n",
    "             \n",
    "             marks = [ 20, 23, 34, 45, 33, 10, 43, 23, 27, 34, 37, 44, 42, 43 ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "X9UkXY4aLAuI",
    "outputId": "9dd79194-45e2-4d47-c9a0-789ea1dc8df9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[44.44444444444444, 51.111111111111114, 75.55555555555556, 100.0, 73.33333333333333, 22.22222222222222, 95.55555555555556, 51.111111111111114, 60.0, 75.55555555555556, 82.22222222222223, 97.77777777777777, 93.33333333333333, 95.55555555555556]\n"
     ]
    }
   ],
   "source": [
    "marks = [ 20, 23, 34, 45, 33, 10, 43, 23, 27, 34, 37, 44, 42, 43 ]\n",
    "\n",
    "print(list(map(lambda x, y=100 :x*y/45 , marks)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1menE5CxLAuI"
   },
   "source": [
    "The output is the percentage scores."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yWR_0Qg2LAuI"
   },
   "source": [
    "**2. Create two lists and add corresponding elements of each list**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "7ZrLz1MtLAuI",
    "outputId": "e13bf0c7-7bd5-4825-d332-8f712907ed5c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[42, 40, 110]\n"
     ]
    }
   ],
   "source": [
    "# iteration using list\n",
    "list_a = [30, 35, 40]\n",
    "list_b = [12, 5, 70]\n",
    "  \n",
    "print(list(map(lambda x, y: x + y, list_a, list_b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B936VMYPLAuJ"
   },
   "source": [
    "<a id='filter'></a>\n",
    "### 5.2 Function filter()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uS2px52LLAuJ"
   },
   "source": [
    "**1. To obtain the  sum of cubes of odd number from 1 to 50**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "APF6sgUSLAuJ",
    "outputId": "3097238c-7b38-467b-844d-a77294af444e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20825"
      ]
     },
     "execution_count": 59,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sum of cubes of odd numers from 1 to 50\n",
    "\n",
    "# user defined function to obtain the cube\n",
    "def cube(num):\n",
    "    return(num*num)\n",
    "\n",
    "# user defined function to obtain odds numbers from a list\n",
    "def isodd(num):\n",
    "    return(num%2 == 1)\n",
    "\n",
    "# create a list of all cubes\n",
    "list_cubes = list(map(cube,filter(isodd,range(1,50))))\n",
    "\n",
    "# sum of all elements in the in the list_cube\n",
    "sum(list_cubes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iFEarNxKLAuJ",
    "outputId": "d6fda2fb-9c3f-4ced-b623-7e4233a6074a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20825"
      ]
     },
     "execution_count": 60,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a list of all cubes\n",
    "list_cubes = list(map(cube,filter(isodd,range(1,50))))\n",
    "\n",
    "# sum of all elements in the in the list_cube\n",
    "sum(list_cubes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5f-7mgYzLAuJ"
   },
   "source": [
    "The same code above can be done using list comprehension  in the following way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "577Fa3NaLAuK",
    "outputId": "4bcb3a77-8224-47e9-a91a-af8c83fc6339",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20825"
      ]
     },
     "execution_count": 61,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# map - the function defined above is called \n",
    "# generator - the range for numbers is fixed\n",
    "# filter - cube is calculated for the numbers which satisfy the 'if' condition\n",
    "# built-in function sum() is used to obtain the sum\n",
    "\n",
    "sum ( [cube(x) for x in range(50) if isodd(x)] ) # Map - Generator - Filter\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "njdoDbehLAuK"
   },
   "source": [
    "**2. To obtain the odd numbers from a list**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3E7Y2p_uLAuK",
    "outputId": "33d1eaaa-88c0-424d-e537-c893d08f9842"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of filter object:  <class 'filter'>\n",
      "Even number is as follows:  [34, 458, 456, 578]\n"
     ]
    }
   ],
   "source": [
    "numbers = [121, 443, 477, 125, 34, 655, 458, 141, 363, 125, 456 , 578, 123]\n",
    "\n",
    "# function that filters the numbers\n",
    "def oddnumber(in_num):\n",
    "    if(in_num % 2) == 0:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Use filter() to remove odd numbers\n",
    "out_filter_number = filter(oddnumber, numbers)\n",
    "\n",
    "print(\"Type of filter object: \", type(out_filter_number))\n",
    "print(\"Even number is as follows: \", list(out_filter_number))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eQXxioZQLAuK"
   },
   "source": [
    "<a id='reduce'></a>\n",
    "### 4.3 Function reduce()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vJtbG60aLAuK"
   },
   "source": [
    "**1. List of  sales in a shop are noted. Obtain the total sales**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ezFebTxMLAuK",
    "outputId": "ba62ee36-0c4a-4f5a-a9ee-b8d19cf556f7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "385730\n"
     ]
    }
   ],
   "source": [
    "# import reduce function from functools\n",
    "from functools import reduce\n",
    "\n",
    "sale = [14565,65460,74450,54546,23245,14543,84355,54566]\n",
    "total_sale = reduce(lambda a, b: a + b, sale)\n",
    "print(total_sale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "M-TU5Ad3LAuL"
   },
   "source": [
    "**Thus we may say the total sale is 385730 INR.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vqqAC8yeLAuL"
   },
   "source": [
    "**2. Factorial of a 5** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1f9APTRCLAuL",
    "outputId": "de994f69-cdb9-492c-9435-fdd04274f453"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The factorial of 6 is  720\n"
     ]
    }
   ],
   "source": [
    "# import reduce function from functools\n",
    "from functools import reduce\n",
    "\n",
    "factorial = reduce(lambda p,q : p*q , range(1,7))\n",
    "\n",
    "print(\"The factorial of 6 is \",factorial)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w_0cXJbhLAuL"
   },
   "source": [
    "<a id='accumulate'></a>\n",
    "### 4.3 Function accumulate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TppNC0c2LAuL"
   },
   "source": [
    "**1.  Sum of first ten whole numbers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oAL52_OzLAuM",
    "outputId": "bcadc62a-8669-45fd-c8ab-49966f06b0c1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The summation of list using accumulate is :[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]\n"
     ]
    }
   ],
   "source": [
    "# importing itertools for accumulate() \n",
    "import itertools \n",
    "\n",
    "# printing summation using accumulate() \n",
    "print (\"The summation of list using accumulate is :\",end=\"\") \n",
    "print (list(itertools.accumulate(range(10),lambda x,y : x+y))) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vOPtm1A6LAuM"
   },
   "source": [
    "The output of reduce() will be:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wEsSqSI-LAuM",
    "outputId": "1830606e-1cf3-434e-eab8-1ba339fa1ecd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n"
     ]
    }
   ],
   "source": [
    "# import reduce function from functools\n",
    "from functools import reduce\n",
    "\n",
    "sum = reduce(lambda a,b : a+b , range(10))\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zu024RbALAuM"
   },
   "source": [
    "The function accumulate() displays the iterations whereas the function reduce() displays the final output."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "ap0gkQ5eLAtw",
    "1gX7eWuVLAtx",
    "Wo7HJfc6LAty",
    "UlRgCl18LAt3",
    "rBn4owO_LAuA",
    "nu3Rm0cWLAuA",
    "iR-uku-sLAuG",
    "1rlc4I7YLAuH",
    "TKW0agUcLAuI",
    "B936VMYPLAuJ",
    "eQXxioZQLAuK",
    "w_0cXJbhLAuL"
   ],
   "name": "Python- Faculty_notebook-Week-4.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
